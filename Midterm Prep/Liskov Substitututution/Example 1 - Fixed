public class Bird{
    public void walk(){}
   }
   
public class FlyingBird extends Bird{
       public void fly(){}
}
   
public class Duck extends FlyingBird{}
      
public class Ostrich extends Bird{}
   
// public class Zoo {
//     public static void main(String[] args) {
//         Bird[] birds = new Bird[2];
//         birds[0] = new Bird();
//         birds[1] = new Bird();

//         for (Bird bird : birds) {
//             bird.walk();
//             //This check must be implemented because there is no 
//             //fly method exists in the Bird class
//             if (bird instanceof FlyingBirds) {
//                 ((FlyingBirds) bird).fly();
//             }
//         }
//     }
// }

// Now let's try to run the same program by substituting bird with its subclasses;

public class Zoo {
    public static void main(String[] args) {
        Bird[] birds = new Bird[2];
        birds[0] = new Duck();
        birds[1] = new Ostrich();

        for (Bird bird : birds) {
            bird.walk();
            if (bird instanceof FlyingBirds) {
                ((FlyingBirds) bird).fly();
            }
        }
    }
}

// It won't throw any error because we were able to successfully substitute sub-classes for their base class. This example follows the LSP and we have done proper inheritance inside the code.